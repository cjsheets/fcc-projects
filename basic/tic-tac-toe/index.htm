<html>
<head>
  <meta content='text/html;charset=utf-8' http-equiv='Content-Type'>
  <meta content='utf-8' http-equiv='encoding'>
  <title>Chad Sheets - Tic Tac Toe</title>
  <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'></script>

  <style>
    @import url(https://fonts.googleapis.com/css?family=Walter+Turncoat);
    body {
      font-family: 'Walter Turncoat', cursive;
      font-size: 3em;
      color: #222222;
      background-color: #EFEFEF;
      text-align: center;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      padding-top: 50px;
    } #container {
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      left: 0;
      margin: auto;
      width: 451px;
      height: 454px;
      border-radius: 10px;
      border: 2px solid #ABABAB;
      background: #CCCCCC;
      display: flex;
      flex-direction: column;
      padding: 12px;
    } #viewport {
      width: 100%;
      border-radius: 10px;
      border: 2px solid #ABABAB;
      background: #E6E6E6;
      display: flex;
      flex-direction: column;
      flex: 1;
    } #screen1, #screen2, #screen3, #screen4 {
      width: 100%;
      text-align: center;
      background: #FFFFFF;
      flex: 1;
      padding-top: 20px;
      border-radius: 10px;
    } #screen3, #screen1, #screen4 {
      display: none;
      flex: 1;
    } #screen3 {
      padding: 0px;
      flex: 2;
    } #screen4 {
      opacity: 0.9;
      filter: alpha(opacity=9);
    } .team {
      font-size: 50px;
      margin: 0px 40px;
      padding: 2px 10px;
      border-radius: 4px;
      border: 2px solid #FFFFFF;
      background: #FFFFFF;
      cursor: pointer;
    } .player, #playAgain {
      font-size: 26px;
      margin: 0px 10px;
      padding: 2px 10px;
      border-radius: 4px;
      border: 2px solid #FFFFFF;
      background: #FFFFFF;
      cursor: pointer;
    } .player-hover {
      border: 2px solid #C2C2C2;
      background: #F2F2F2;
    } #r1, #r2, #c1, #c2 {
      position: absolute;
      margin: auto;
      background: #CCCCCC;
      min-height:1px;
    } #c1, #c2 {
      width: 2px;
      height: 402px;
    } #r1, #r2 {
      height: 2px;
      width: 400px
    } #t1, #t2, #t3, #t4, #t5,
      #t6, #t7, #t8, #t9 {
      position: absolute;
      border: 0px solid #FF0000;
      height: 130px;
      width: 138px;
      cursor: pointer;
      font-size: 1.6em;
      padding-top: 10px;
    } #result {
      margin: auto;
      border-radius: 4px;
      border: 2px solid #C2C2C2;
    }

  </style>
  <script>
  class Ttt {
    constructor() {
      console.log('construct');
      this.turn = 1;
      this.moves = 0;
      this.listening = false;
      this.b = {
        t1: 0, t2: 0, t3: 0,
        t4: 0, t5: 0, t6: 0,
        t7: 0, t8: 0, t9: 0
      }
    }

    startGame() {
      console.log('starting game');
      clearBoard();
      this.turn = 1;
      this.moves = 0;
      this.listening = false;
      this.b = {
        t1: 0, t2: 0, t3: 0,
        t4: 0, t5: 0, t6: 0,
        t7: 0, t8: 0, t9: 0
      }
      this.nextTurn();
    }

    nextTurn() {
      if (this.player[this.turn] == 1) {
        console.log('your turn');
        this.listening = true;
      } else {
        console.log('my turn');
        var cpuMove = this.cpuMove(this.turn);
        drawMove(this.turn, cpuMove);
        this.makeMove(this.turn, cpuMove);
      }
    }

    makeMove(team, cell) {
      this.listening = false;
      this.moves = this.moves + 1;
      this.b[cell] = team;
      console.log('makeMove: ' + cell + ', move #: ' + this.moves);
      if(this.checkForVictory() || this.moves == 9){
        gameOver();
      } else {
      this.turn = (this.turn == 1) ? 2 : 1;
      this.nextTurn();
      }
    }

    validMove(id) {
      if (this.b[id] == 0) {
        console.log('validMove');
        return true;
      }
      console.log('invalidMove: ' + id);
      return false;
    }

    cpuMove(team){
      console.log('cpu is deciding...');
      console.log(this.b);
      var pairs = this.identifyPairs();
      console.log(pairs);
      switch(this.b.t5){
        case 0: return 't5'; // Take middle
        default: var canIWin = this.checkIfCanWin(team, pairs);
          if(canIWin){ // Can I win?
            console.log('I think i can win');
            return canIWin;
          } else {
            var otherTeam = 0;
            (team == 2) ? otherTeam = 1 : otherTeam = 2;
            var canTheyWin = this.checkIfCanWin(otherTeam, pairs);
            if(canTheyWin){
              console.log('I think you can win: ' + canTheyWin);
              return canTheyWin;
            }
          } // No one can win on this move
          switch(this.checkIsCornerTaken()){ // chose adjacent to corner
            case 't1':
              if(this.b.t3 == 0){ return 't3' } else if(this.b.t7 == 0){
                return 't7'} else if(this.b.t9 == 0){ return 't9'}; break;
            case 't3': 
              if(this.b.t1 == 0){ return 't1' } else if(this.b.t9 == 0){
                return 't9'} else if(this.b.t7 == 0){ return 't7'}; break;
            case 't7': 
              if(this.b.t9 == 0){ return 't9' } else if(this.b.t3 == 0){
                return 't3'} else if(this.b.t1 == 0){ return 't1'}; break;
            case 't9': 
              if(this.b.t7 == 0){ return 't7' } else if(this.b.t1 == 0){
                return 't1'} else if(this.b.t3 == 0){ return 't3'}; break;
          }
          var availableMoves = [];
          for(var i=1; i<10; i++){
            if(this.validMove('t' + i)){
              availableMoves.push('t' + i);
            }
          }
          console.log('Random Move');
          return availableMoves[Math.floor(Math.random() * availableMoves.length)];
        }
      }

    checkIsCornerTaken() {
             if(this.b.t1 != 0){ return 't1';
      } else if(this.b.t3 != 0){ return 't3';
      } else if(this.b.t7 != 0){ return 't7';
      } else if(this.b.t9 != 0){ return 't9';
      } else {
        return false;
      }
    }

    checkIfCanWin(team, pairs) {
      console.log('Can team ' + team + ' win... ')
      for(var i=0;i<pairs[team].length;i++){
        if(pairs[team][i][2]) { // horizontal
          if(pairs[team][i][4]) { // space to the right
            if(this.validMove('t' + (parseInt(pairs[team][i][1].substr(1,1)) + 1))){
              return 't' + (parseInt(pairs[team][i][1].substr(1,1)) + 1);
            }
          } else {
            if(this.validMove('t' + (parseInt(pairs[team][i][0].substr(1,1)) - 1))){
              return 't' + (parseInt(pairs[team][i][0].substr(1,1)) - 1);
            }
          }
        } else if(pairs[team][i][3]) {  // vertical
          if(pairs[team][i][4]) { // space bellow
            if(this.validMove('t' + (parseInt(pairs[team][i][1].substr(1,1)) + 3))){
              return 't' + (parseInt(pairs[team][i][1].substr(1,1)) + 3);
            }
          } else {
            if(this.validMove('t' + (parseInt(pairs[team][i][0].substr(1,1)) - 3))){
              return 't' + (parseInt(pairs[team][i][0].substr(1,1)) - 3);
            }
          }
        } else { // diagonal
          switch(pairs[team][i][0].substr(1,1) + pairs[team][i][1].substr(1,1)){
            case '15': if(this.validMove('t9')){ return 't9';} break;
            case '59': if(this.validMove('t1')){ return 't1';} break;
            case '75': if(this.validMove('t3')){ return 't3';} break;
            case '53': if(this.validMove('t7')){ return 't7';} break;
          }
        }
      }
      return false;
    }

    checkForVictory() {
      if(this.b.t1 == this.b.t2 && this.b.t2 == this.b.t3 && this.b.t3 != 0 ||
          this.b.t4 == this.b.t5 && this.b.t5 == this.b.t6 && this.b.t6 != 0 ||
          this.b.t7 == this.b.t8 && this.b.t8 == this.b.t9 && this.b.t9 != 0 ||
          this.b.t1 == this.b.t4 && this.b.t4 == this.b.t7 && this.b.t7 != 0 ||
          this.b.t2 == this.b.t5 && this.b.t5 == this.b.t8 && this.b.t8 != 0 ||
          this.b.t3 == this.b.t6 && this.b.t6 == this.b.t9 && this.b.t9 != 0 ||
          this.b.t1 == this.b.t5 && this.b.t5 == this.b.t9 && this.b.t9 != 0 ||
          this.b.t7 == this.b.t5 && this.b.t5 == this.b.t3 && this.b.t3 != 0 ){
        console.log('victorious');
        return true;
      }
      return false;
    }

    identifyPairs(){
      var pairs = [[], [], []]; // [ team# ] -> [ cell cell horiz vert space-available-down/right ]
      (this.b.t1 == this.b.t2) ? pairs[this.b.t2].push(['t1', 't2', true, false, true]) : true;
      (this.b.t2 == this.b.t3) ? pairs[this.b.t2].push(['t2', 't3', true, false, false]) : true;
      (this.b.t4 == this.b.t5) ? pairs[this.b.t5].push(['t4', 't5', true, false, true]) : true;
      (this.b.t5 == this.b.t6) ? pairs[this.b.t5].push(['t5', 't6', true, false, false]) : true;
      (this.b.t7 == this.b.t8) ? pairs[this.b.t7].push(['t7', 't8', true, false, true]) : true;
      (this.b.t8 == this.b.t9) ? pairs[this.b.t7].push(['t8', 't9', true, false, false]) : true;
      (this.b.t1 == this.b.t4) ? pairs[this.b.t4].push(['t1', 't4', false, true, true]) : true;
      (this.b.t4 == this.b.t7) ? pairs[this.b.t4].push(['t4', 't7', false, true, false]) : true;
      (this.b.t2 == this.b.t5) ? pairs[this.b.t5].push(['t2', 't5', false, true, true]) : true;
      (this.b.t5 == this.b.t8) ? pairs[this.b.t5].push(['t5', 't8', false, true, false]) : true;
      (this.b.t3 == this.b.t6) ? pairs[this.b.t6].push(['t3', 't6', false, true, true]) : true;
      (this.b.t6 == this.b.t9) ? pairs[this.b.t6].push(['t6', 't9', false, true, false]) : true;
      (this.b.t1 == this.b.t5) ? pairs[this.b.t5].push(['t1', 't5', false, false, true]) : true;
      (this.b.t5 == this.b.t9) ? pairs[this.b.t5].push(['t5', 't9', false, false, false]) : true;
      (this.b.t7 == this.b.t5) ? pairs[this.b.t5].push(['t7', 't5', false, false, true]) : true;
      (this.b.t5 == this.b.t3) ? pairs[this.b.t5].push(['t5', 't3', false, false, false]) : true;
      return pairs;
    }
  }

  var ttt = new Ttt();

  $( document ).ready(function() {

    $('#1, #2, #x, #o, #playAgain').mouseenter(function () {
      $(this).addClass('player-hover');
    }).mouseleave(function () {
      $(this).removeClass('player-hover');
    });

    $('#1, #2, #x, #o, #playAgain').click(function () {
      if($(this).attr('id') == 'x' || $(this).attr('id') == 'o'){
        // Only One Player
        ttt.player = [];
        if($(this).attr('id') == 'x'){        
          ttt.player[1] = 1; // 0 = cpu, 1 = human
          ttt.player[2] = 0;
        } else {    
          ttt.player[1] = 0;
          ttt.player[2] = 1;
        }
        var screen = 2;
        ttt.startGame();
      } else if($(this).attr('id') == 'playAgain') {
        $('#screen4').fadeOut(500, function(){
          $('#screen3').fadeIn(500);
        });
        ttt.startGame();
        return;
      } else {
        $(this).attr('id') == '1' ? ttt.players = 1 : ttt.players = 2;

        var screen = 1;
      }
      $('#screen' + screen).fadeOut(500, function(){
        $('#screen' + (screen + 1)).fadeIn(500);
      });
    });

    $('.target').click(function () {
      if(ttt.listening){
        if(ttt.validMove($(this).attr('id'))) {
          drawMove(ttt.turn, $(this).attr('id'));
          ttt.makeMove(ttt.turn, $(this).attr('id'));
        }
      }
    });

  });

  function gameOver(){
    if(ttt.moves == 9){
      $('#winner').hide();
      $('.status').text('Draw');
      $('#screen4').fadeIn(500);
    } else {
      var winner = '';
      (ttt.turn == 1) ? winner = 'X' : winner = 'O';
      $('#winner').text(winner);
      $('#winner').show();
      $('.status').text(' wins!');
      $('#screen4').fadeIn(500);
    }
  }

  function clearBoard(){
    $('.target').text('')
  }

  function drawMove(team, move){
    var marker = '';
    (team == 1) ? marker = 'X' : marker = 'O';
    $('#' + move).text(marker);
  }

  function displayVictory() {

  }


  </script>
</head>
<body>
<main>
  <div id='container'>
    <div id='viewport'>
      <div id='screen1'>
        How do you<br>want to play?<br><br>
        <span><a class='player' id='1'>One Player</a><a class='player' id='2'>Two Player</a></span>
      </div>
      <div id='screen2'>
        Would you like to<br> be X or O?<br><br>
        <span><a class='team' id='x'>X</a><a class='team' id='o'>O</a></span>
      </div>
      <div id='screen3'>
        <div id='r1' style='top: 150px; right: 36px;'></div><div id='c1' style='left: 160px; top: 38px;'></div>
        <div id='r2' style='top: 300px; right: 36px;'></div><div id='c2' style='left: 310px; top: 38px;'></div>
        <div id='t1' class='target' style='top: 18px; left: 20px;'></div>
        <div id='t2' class='target' style='top: 18px; left: 165px;'></div>
        <div id='t3' class='target' style='top: 18px; left: 310px;'></div>
        <div id='t4' class='target' style='top: 160px; left: 20px;'></div>
        <div id='t5' class='target' style='top: 160px; left: 165px;'></div>
        <div id='t6' class='target' style='top: 160px; left: 310px;'></div>
        <div id='t7' class='target' style='top: 302px; left: 20px;'></div>
        <div id='t8' class='target' style='top: 302px; left: 165px;'></div>
        <div id='t9' class='target' style='top: 302px; left: 310px;'></div>
      </div>
    </div>
    <div id='screen4'>
      <a id='winner' class='player'></a><span class='status'></span><br><br><a id='playAgain'>Play Again</a>
    </div>
  </div>
</main>
</body>
</html>