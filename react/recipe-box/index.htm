<html>
<head>
  <meta content='text/html;charset=utf-8' http-equiv='Content-Type'>
  <meta content='utf-8' http-equiv='encoding'>
	<title>Chad Sheets - Recipe Book</title>
<link rel='stylesheet' href='http://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'>
<link rel='stylesheet' type='text/css' href='style.css' />
<script src='https://unpkg.com/react@15.3.2/dist/react.js'></script>
<script src='https://unpkg.com/react-dom@15.3.2/dist/react-dom.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'></script>
<script src='http://code.jquery.com/ui/1.12.0/jquery-ui.min.js'></script>
<script type='text/babel'>
function findRecipe(ary, id){
  for(var i=0; i < ary.length; i++) {
    if(ary[i].id == id) {
      return i;
    }
  }
}
class TodoApp extends React.Component {
  constructor(props) {
    super(props);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleRecipeChange = this.handleRecipeChange.bind(this);
    this.editRecipe = this.editRecipe.bind(this);
    this.deleteRecipe = this.deleteRecipe.bind(this);
    this.handleIngredientChange = this.handleIngredientChange.bind(this);
    this.closeDialog = this.closeDialog.bind(this);
    this.handleDialog = this.handleDialog.bind(this);
    this.state = {items: [], recipe: '', ingredients: '', dialog: '',
      recipies: JSON.parse(localStorage.getItem('_cjsheets_recipes'))};
  }

  componentDidMount() {
    console.log('componentDidMount');
    if(!this.state.recipies) {
      this.setState({items: this.state.recipies});
    } else {
      this.setState({ items: [{
        recipe: 'Pumpkin Pie',
        ingredients: 'Pumpkin Puree,Sweetened Condensed Milk,Eggs,Pumpkin Pie Spice,Pie Crust',
        id: '1'
      },{
        recipe: 'Spaghetti',
        ingredients: 'Noodles,Tomato Sauce,(Optional) Meatballs',
        id: '2'
      },{
        recipe: 'Onion Pie',
        ingredients: 'Onion,Pie Crust,Sounds Yummy right?',
        id: '3'
      }] });
    }
    $(ReactDOM.findDOMNode(this)).find('#accordion').accordion({ header: "h3", collapsible: true });
    var parent = this;
    this.setState({ 
      dialog: $(ReactDOM.findDOMNode(this)).find('#dialog-form').dialog({
        autoOpen: false,
        height: 400,
        show: { effect: "drop", duration: 500 },
        hide: { effect: "drop", duration: 500 },
        width: $(window).width()-200,
        modal: true,
        val1: 'first',
        val2: 'second',
        open: function(){
          console.log(parent.state.dialog);
        },
      })
    });
    
  }

  componentDidUpdate() {
    console.log('componentDidUpdate');
    $(ReactDOM.findDOMNode(this)).find('#accordion').accordion('refresh');
    localStorage.setItem('_cjsheets_recipes', JSON.stringify(this.state.items));
  }

  editRecipe(e) {
    console.log('editRecipe: ' + e.target.value);
    var ary = this.state.items;
    var id = findRecipe(ary, e.target.value);
    this.state.dialog.dialog('open');
    this.setState({recipe: this.state.items[id].recipe});
    document.getElementById('recipe').value = this.state.items[id].recipe;
    this.setState({ingredients: this.state.items[id].ingredients});
    document.getElementById('ingredients').value = this.state.items[id].ingredients;
    ary.splice(id, 1);
    this.setState({items: ary});
    localStorage.setItem('_cjsheets_recipes', JSON.stringify(this.state.items));
  }

  deleteRecipe(e) {
    console.log('deleteRecipe: ' + e.target.value);
    var ary = this.state.items;
    ary.splice(findRecipe(ary, e.target.value), 1);
    this.setState({items: ary});
    localStorage.setItem('_cjsheets_recipes', JSON.stringify(this.state.items));
  }

  handleRecipeChange(e) {
    console.log('handleRecipeChange');
    this.setState({recipe: e.target.value});
  }

  handleIngredientChange(e) {
    console.log('handleIngredientChange');
    this.setState({ingredients: e.target.value});
  }

  closeDialog(e) {
    console.log('closeDialog');
    this.state.dialog.dialog('close');
  }

  handleDialog(e) {
    console.log('handleDialog');
    this.state.dialog.dialog('open');
  }

  handleSubmit(e) {
    e.preventDefault();
    console.log('handleSubmit');
    var newRecipe = {
      recipe: this.state.recipe,
      ingredients: this.state.ingredients,
      id: Date.now()
    };
    this.setState((prevState) => ({
      items: prevState.items.concat(newRecipe),
      recipe: '',
      ingredients: ''
    }));
    localStorage.setItem('_cjsheets_recipes', JSON.stringify(this.state.items));
  }

  render() {
    var ingredients = [];
    var parent = this;
    return (
      <div>
        <header>
          <div className="row">
            <div className="col left-col"><h2>Recipe Box</h2></div>
            <div className="col text-col right-col">
              <button onClick={parent.handleDialog} id='create-user' className="ui-button ui-corner-all ui-widget">Add Recipe</button>
            </div>
          </div>
        </header>
        <main>
          <div id='accordion'>
            {this.state.items.map(function(item) {
            return (
              <span key={item.id}>
                <h3>{item.recipe}</h3><div>
                  {item.ingredients.split(',').map(function(ingredient, i) {
                  return ( <p key={i}>{ingredient}</p> );
                  })}
                <div className="recipeOptions">
                  <button onClick={parent.editRecipe} value={item.id} className="ui-button ui-corner-all ui-widget">Edit</button>
                  <button onClick={parent.deleteRecipe} value={item.id} className="ui-button ui-corner-all ui-widget">Delete</button>
                </div>
                </div>
              </span>
            );
            })}
          </div>
          <div id='dialog-form' title='Create new user'>
            <form onSubmit={this.handleSubmit} id='addRecipeForm'> 
              <p className='validateTips'>Edit Recipe</p>
                <fieldset>
                  <label htmlFor='name'>Recipe</label>
                  <input value={this.state.recipe} onChange={this.handleRecipeChange} id="recipe" className='text ui-widget-content ui-corner-all' />
                  <label htmlFor='email'>Ingredients</label>
                  <input value={this.state.ingredients} onChange={this.handleIngredientChange} id="ingredients" className='text ui-widget-content ui-corner-all' /> 
                </fieldset>
              <div className="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix">
                <div className="ui-dialog-buttonset">
                  <button onClick={parent.closeDialog} type="submit" id="submitButton" className="ui-button ui-corner-all ui-widget">Save</button>
                  <button onClick={parent.closeDialog} type="button" id="closeButton" className="ui-button ui-corner-all ui-widget">Delete</button>
                </div>
              </div>
            </form>
          </div>
        </main>
      </div>
    );
  }
}

ReactDOM.render(<TodoApp />, document.getElementById('target'));
</script>
</head>
<body>
  <div id='target'></div>
</body>
</html>